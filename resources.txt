eas update add remove 

$ npx expo uninstall expo-updates

package.json
"expo-updates": "~0.25.17",

someone told this backdated version is working
"expo-updates": "0.18.8",
expo-update@0.18.8

build.gladle at the end of the file
apply from: "./eas-build.gradle"

app.json under plugin
      [
        "expo-updates",
        {
          "username": "adsalam"
        }
      ]

app.js
  async function onFetchUpdateAsync() {
    try {
      const update = await Updates.checkForUpdateAsync();

      if (update.isAvailable) {
        await Updates.fetchUpdateAsync();
        await Updates.reloadAsync();
      }
    } catch (error) {
      // You can also add an alert() to see the error message in case of an error when fetching updates.
      alert(`Error fetching latest Expo update: ${error}`);
    }
  }

  useEffect(() => {
    onFetchUpdateAsync();
  },[]);




Icons for Ant design: 
https://oblador.github.io/react-native-vector-icons/

Linear gradiant: 
import { LinearGradient } from 'expo-linear-gradient';
import { Animated } from "react-native";

const AnimatedLinearGradient = Animated.createAnimatedComponent(LinearGradient);
<AnimatedLinearGradient
    colors={["rgba(255,255,255, 0)", "rgba(255,255,255, 1)"]}
    style={{ flex: 1 }} />
    <AnimatedLinearGradient
            colors={[gradiantStart, gradiantEnd]}
            style={{ flex: 1 }}>

import { Modal } from 'react-native';

<Modal visible={true}>
    <View style={loginRegisterStyle.content}>
        <Text>dddl modal</Text>
    </View>
</Modal>     


import { Formik } from 'formik';

<Formik 
    initialValues={{username: '',password: '' }}
    onSubmit={(val, actions) => {
        actions.resetForm();
        // textHandler(val);
}}
>
    {(props) =>(
        <View>
            <TextInput 
                placeholder='Usernames' style={loginRegisterStyle.input}
                onChangeText={props.handleChange('username')}
                value={props.values.username}
                    />
            <TextInput 
                placeholder='Password' style={loginRegisterStyle.input}
                onChangeText={props.handleChange('password')}
                value={props.values.password}
                    />
            <Button onPress={props.handleSubmit} title='Login ' style={loginRegisterStyle.button} />
        </View>
    )}
</Formik> 


<TouchableOpacity 
    onPress={() => navigation.navigate('Settings')}
    style={loginRegisterStyle.button}
    >
    <Text style={loginRegisterStyle.text}>Go to Settings</Text>
</TouchableOpacity>





import SelectDropdown from 'react-native-select-dropdown'
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';

const emojisWithIcons = [
    {title: 'happy', icon: 'emoticon-happy-outline'},
    {title: 'cool', icon: 'emoticon-cool-outline'},
  ];


<SelectDropdown
    data={emojisWithIcons}
    onSelect={(selectedItem, index) => {
      console.log(selectedItem, index);
    }}
    renderButton={(selectedItem, isOpened) => {
      return (
        <View style={styles.dropdownButtonStyle}>
          {selectedItem && (
            <Icon name={selectedItem.icon} style={styles.dropdownButtonIconStyle} />
          )}
          <Text style={styles.dropdownButtonTxtStyle}>
            {(selectedItem && selectedItem.title) || 'Select your mood'}
          </Text>
          <Icon name={isOpened ? 'chevron-up' : 'chevron-down'} style={styles.dropdownButtonArrowStyle} />
        </View>
      );
    }}
    renderItem={(item, index, isSelected) => {
      return (
        <View style={{...styles.dropdownItemStyle, ...(isSelected && {backgroundColor: '#D2D9DF'})}}>
          <Icon name={item.icon} style={styles.dropdownItemIconStyle} />
          <Text style={styles.dropdownItemTxtStyle}>{item.title}</Text>
        </View>
      );
    }}
    showsVerticalScrollIndicator={false}
    dropdownStyle={styles.dropdownMenuStyle}
  />

  <CustomSelect selecteds={(val) => props.values.guest = val} />


